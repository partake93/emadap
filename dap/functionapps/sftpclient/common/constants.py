from enum import Enum
import os
from typing import Any, Dict

# Constants
INSTANCE_TYPE = "timer_trigger_fa"
CSV_SCENARIOS_CONFIG_FILE = "csv_file_scenarios.json"
EXCEL_SCENARIOS_CONFIG_FILE = "excel_file_scenarios.json"

# Enabled processes
ENABLED_PROCESS = ["SFTP", "MANUAL_FILE_UPLOAD"]

# Environment variables
EZ_PRESTAGING_ADLS_CONNECTION_STRING = os.environ[
    "EZ_PRESTAGING_ADLS_CONNECTION_STRING"
]
EZ_PRESTAGING_BLOB_CONNECTION_STRING = os.environ[
    "EZ_PRESTAGING_BLOB_CONNECTION_STRING"
]
IZ_STAGING_ADLS_CONNECTION_STRING = os.environ["IZ_STAGING_ADLS_CONNECTION_STRING"]
EZ_PRESTAGING_ADLS_SFTP_CONTAINER_PATH = os.environ[
    "EZ_PRESTAGING_ADLS_SFTP_CONTAINER_PATH"
]
IZ_STAGING_ADLS_SFTP_CONTAINER_PATH = os.environ["IZ_STAGING_ADLS_SFTP_CONTAINER_PATH"]
EZ_PRESTAGING_BLOB_MANUAL_UPLOAD_CONTAINER_PATH = os.environ[
    "EZ_PRESTAGING_BLOB_MANUAL_UPLOAD_CONTAINER_PATH"
]
IZ_STAGING_ADLS_MANUAL_UPLOAD_CONTAINER_PATH = os.environ[
    "IZ_STAGING_ADLS_MANUAL_UPLOAD_CONTAINER_PATH"
]
EZ_PRESTAGING_ADLS_ARCHIVE_SFTP_CONTAINER_PATH = os.environ[
    "EZ_PRESTAGING_ADLS_ARCHIVE_SFTP_CONTAINER_PATH"
]
EZ_PRESTAGING_ADLS_REJECTED_SFTP_FILES_CONTAINER_PATH = os.environ[
    "EZ_PRESTAGING_ADLS_REJECTED_SFTP_FILES_CONTAINER_PATH"
]
EZ_PRESTAGING_ADLS_REJECTED_MANUAL_UPLOAD_FILES_CONTAINER_PATH = os.environ[
    "EZ_PRESTAGING_ADLS_REJECTED_MANUAL_UPLOAD_FILES_CONTAINER_PATH"
]
EZ_PRESTAGING_ADLS_ARCHIVE_MANUAL_UPLOAD_CONTAINER_PATH = os.environ[
    "EZ_PRESTAGING_ADLS_ARCHIVE_MANUAL_UPLOAD_CONTAINER_PATH"
]
EZ_PRESTAGING_BLOB_ARCHIVE_QUARANTINE_CONTAINER_PATH = os.environ[
    "EZ_PRESTAGING_BLOB_ARCHIVE_QUARANTINE_CONTAINER_PATH"
]
AzureWebJobsStorage = os.environ["AzureWebJobsStorage"]
TRACKER_CONTAINER_PATH = os.environ["TRACKER_CONTAINER_PATH"]
TRACKER_FILE_NAME = os.environ["TRACKER_FILE_NAME"]
LOG_CONTAINER_PATH = os.environ["LOG_CONTAINER_PATH"]
PARQUET_FLAG = os.environ["PARQUET_FLAG"]
METADATA_SQL_DB_CONNECTION_STRING = os.environ["METADATA_SQL_DB_CONNECTION_STRING"]
KV_ENABLE = os.environ["KV_ENABLE"]
KV_URL = os.environ["KV_URL"]
PRIVATE_KEY_EMA_PGP = os.environ["PRIVATE_KEY_EMA_PGP"]
PUBLIC_KEY_EMA_PGP = os.environ["PUBLIC_KEY_EMA_PGP"]
KV_PRIVATE_KEY_EMA_PGP_SECRET_NAME = os.environ["KV_PRIVATE_KEY_EMA_PGP_SECRET_NAME"]
KV_PUBLIC_KEY_EMA_PGP_SECRET_NAME = os.environ["KV_PUBLIC_KEY_EMA_PGP_SECRET_NAME"]
EZ_PRESTAGING_ADLS_CONNECTION_SECRET_NAME = os.environ[
    "EZ_PRESTAGING_ADLS_CONNECTION_SECRET_NAME"
]
EZ_PRESTAGING_BLOB_CONNECTION_SECRET_NAME = os.environ[
    "EZ_PRESTAGING_BLOB_CONNECTION_SECRET_NAME"
]
IZ_STAGING_ADLS_CONNECTION_SECRET_NAME = os.environ[
    "IZ_STAGING_ADLS_CONNECTION_SECRET_NAME"
]
METADATA_SQL_DB_CONNECTION_SECRET_NAME = os.environ[
    "METADATA_SQL_DB_CONNECTION_SECRET_NAME"
]
STAGING_ADLS_QUEUE_NAME = os.environ["STAGING_ADLS_QUEUE_NAME"]

# Constants for scan results
MALWARE_SCANNING_TAG = "Malware Scanning scan result"
NO_THREATS_FOUND = "No threats found"
MALICIOUS = "Malicious"


# Function app activities for logging ref details
class ActivityTypes(Enum):
    DECRYPTION = "decryption"
    VALIDATIONS = "validations"
    PROCESS_CSV = "process_csv"
    PROCESS_EXCEL = "process_excel"
    PROCESS_ZIP = "process_zip"


# Common configuration for processing activities
PROCESS_ACTIVITY_CONFIG = {
    "zip_file_name": str,
    "file_name": str,
    "parquet_file_name": str,
    "validation_condition": str,
    "summary_count": int,
    "header_count": int,
    "row_count": int,
    "is_split_file": bool,
}

ACTIVITIES_CONFIG: Dict[str, Dict[str, Any]] = {
    ActivityTypes.DECRYPTION.value: {"file_name": str},
    ActivityTypes.VALIDATIONS.value: {
        "zip_file_name": str,
        "file_name": str,
        "validations": list,
    },
    ActivityTypes.PROCESS_CSV.value: PROCESS_ACTIVITY_CONFIG,
    ActivityTypes.PROCESS_EXCEL.value: PROCESS_ACTIVITY_CONFIG,
    ActivityTypes.PROCESS_ZIP.value: PROCESS_ACTIVITY_CONFIG,
}

# Control tables
CONTROL_TBL_SCHEMA = "METADATA_DA"
ACTIVITY_TYPES_TBL = "ACTIVITY_TYPES"
ACTIVITY_FILE_CONFIG_TBL = "ACTIVITY_FILE_CONFIG"

# Audit tables
AUDIT_TBL_SCHEMA = "METADATA_DA"
ACTIVITY_RUN_LOG_TBL = "ACTIVITY_RUN_LOG"
ACTIVITY_ERROR_LOG_TBL = "ACTIVITY_ERROR_LOG"

# Log status states
LOG_ACTIVITY_START = "In Progress"
LOG_ACTIVITY_END_SUCCESS = "Completed"
LOG_ACTIVITY_END_FAILED = "Failed"
